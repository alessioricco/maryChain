
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPIPEleftORleftANDleftNOTnonassocEQUALITYGREATERLESSGREATEREQUALLESSEQUALrightUMINUSleftPLUSMINUSleftTIMESDIVIDEAND AS BOOLEAN BOOLEANCAST CATCH COMMA DEF DIVIDE DO DOT DOUBLECAST ELSE EMPTY EQUALITY EQUALS FALSE FINALLY FOREACH FUNC GREATER GREATEREQUAL HEAD IDENTIFIER IF IMPLIES IMPORT IN INTEGERCAST LAMBDA LAZY LBRACK LCBRACE LEN LESS LESSEQUAL LET LPAREN MINUS NAMESPACE_OP NOT NULL NUMBER OR PIPE PLUS RBRACK RCBRACE RPAREN STRING STRINGCAST TAIL THEN TIMES TRUE TRY WHILEprogram : imports expression\n               | expressionimport : IMPORT IDENTIFIER AS IDENTIFIER\n    imports : import\n            | imports import\n    expression : LET IDENTIFIER EQUALS expression IN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENterm : factorfactor : STRINGfactor : NUMBERfactor : TRUE\n              | FALSEexpression : WHILE expression DO expressionexpression : IF expression THEN expression ELSE expressionexpression : IF expression THEN expressionexpression : LAZY expressionterm : LCBRACE term RCBRACElambda : LAMBDA LPAREN args RPAREN expressionexpression : expression PIPE expressionexpression : function_call \n                  | lambdaexpression : termfunction_call : function_call LPAREN args RPAREN\n                     | function_call LPAREN RPAREN\n                     | lambda LPAREN args RPAREN\n                     | IDENTIFIERargs : args COMMA arg\n            | arg\n            | arg : expression'
    
_lr_action_items = {'LET':([0,2,4,7,8,9,10,11,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[5,5,-4,5,5,5,5,5,-5,5,5,5,5,5,5,5,5,5,5,5,5,-3,5,5,5,]),'MINUS':([0,2,3,4,6,7,8,9,10,11,12,13,14,17,19,20,21,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,39,41,42,43,44,45,46,47,48,49,51,53,57,58,59,60,61,62,63,64,65,66,67,69,70,71,],[7,7,26,-4,-31,7,7,7,7,7,-25,-26,-27,-13,-14,-15,-16,-17,26,-5,7,7,7,7,7,26,26,26,26,26,7,7,7,-7,-8,-9,-10,26,7,-12,7,7,-29,26,-22,26,26,26,-28,7,-30,-3,7,7,7,26,26,26,]),'LPAREN':([0,2,4,6,7,8,9,10,11,12,13,14,16,17,19,20,21,22,24,25,26,27,28,29,31,35,36,37,39,41,42,43,44,45,46,47,48,49,51,57,59,60,61,62,63,64,65,66,67,69,70,71,],[8,8,-4,-31,8,8,8,8,8,36,37,-27,39,-13,-14,-15,-16,-17,-5,8,8,8,8,8,-11,-21,8,8,8,-7,-8,-9,-10,-24,8,-12,8,8,-29,-22,-18,-20,-28,8,-30,-3,8,8,8,-23,-6,-19,]),'WHILE':([0,2,4,7,8,9,10,11,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[9,9,-4,9,9,9,9,9,-5,9,9,9,9,9,9,9,9,9,9,9,9,-3,9,9,9,]),'IF':([0,2,4,7,8,9,10,11,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[10,10,-4,10,10,10,10,10,-5,10,10,10,10,10,10,10,10,10,10,10,10,-3,10,10,10,]),'LAZY':([0,2,4,7,8,9,10,11,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[11,11,-4,11,11,11,11,11,-5,11,11,11,11,11,11,11,11,11,11,11,11,-3,11,11,11,]),'IMPORT':([0,2,4,24,64,],[15,15,-4,-5,-3,]),'IDENTIFIER':([0,2,4,5,7,8,9,10,11,15,24,25,26,27,28,29,36,37,39,46,48,49,55,62,64,65,66,67,],[6,6,-4,30,6,6,6,6,6,38,-5,6,6,6,6,6,6,6,6,6,6,6,64,6,-3,6,6,6,]),'LAMBDA':([0,2,4,7,8,9,10,11,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[16,16,-4,16,16,16,16,16,-5,16,16,16,16,16,16,16,16,16,16,16,16,-3,16,16,16,]),'LCBRACE':([0,2,4,7,8,9,10,11,18,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[18,18,-4,18,18,18,18,18,18,-5,18,18,18,18,18,18,18,18,18,18,18,18,-3,18,18,18,]),'STRING':([0,2,4,7,8,9,10,11,18,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[19,19,-4,19,19,19,19,19,19,-5,19,19,19,19,19,19,19,19,19,19,19,19,-3,19,19,19,]),'NUMBER':([0,2,4,7,8,9,10,11,18,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[20,20,-4,20,20,20,20,20,20,-5,20,20,20,20,20,20,20,20,20,20,20,20,-3,20,20,20,]),'TRUE':([0,2,4,7,8,9,10,11,18,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[21,21,-4,21,21,21,21,21,21,-5,21,21,21,21,21,21,21,21,21,21,21,21,-3,21,21,21,]),'FALSE':([0,2,4,7,8,9,10,11,18,24,25,26,27,28,29,36,37,39,46,48,49,62,64,65,66,67,],[22,22,-4,22,22,22,22,22,22,-5,22,22,22,22,22,22,22,22,22,22,22,22,-3,22,22,22,]),'$end':([1,3,6,12,13,14,17,19,20,21,22,23,31,35,41,42,43,44,45,47,51,57,59,60,61,63,69,70,71,],[0,-2,-31,-25,-26,-27,-13,-14,-15,-16,-17,-1,-11,-21,-7,-8,-9,-10,-24,-12,-29,-22,-18,-20,-28,-30,-23,-6,-19,]),'PLUS':([3,6,12,13,14,17,19,20,21,22,23,31,32,33,34,35,41,42,43,44,45,47,51,53,57,58,59,60,61,63,69,70,71,],[25,-31,-25,-26,-27,-13,-14,-15,-16,-17,25,25,25,25,25,25,-7,-8,-9,-10,25,-12,-29,25,-22,25,25,25,-28,-30,25,25,25,]),'TIMES':([3,6,12,13,14,17,19,20,21,22,23,31,32,33,34,35,41,42,43,44,45,47,51,53,57,58,59,60,61,63,69,70,71,],[27,-31,-25,-26,-27,-13,-14,-15,-16,-17,27,27,27,27,27,27,27,27,-9,-10,27,-12,-29,27,-22,27,27,27,-28,-30,27,27,27,]),'DIVIDE':([3,6,12,13,14,17,19,20,21,22,23,31,32,33,34,35,41,42,43,44,45,47,51,53,57,58,59,60,61,63,69,70,71,],[28,-31,-25,-26,-27,-13,-14,-15,-16,-17,28,28,28,28,28,28,28,28,-9,-10,28,-12,-29,28,-22,28,28,28,-28,-30,28,28,28,]),'PIPE':([3,6,12,13,14,17,19,20,21,22,23,31,32,33,34,35,41,42,43,44,45,47,51,53,57,58,59,60,61,63,69,70,71,],[29,-31,-25,-26,-27,-13,-14,-15,-16,-17,29,-11,29,29,29,29,-7,-8,-9,-10,-24,-12,-29,29,-22,29,29,29,-28,-30,29,29,29,]),'RPAREN':([6,12,13,14,17,19,20,21,22,31,32,35,36,37,39,41,42,43,44,45,47,50,51,52,53,54,56,57,59,60,61,63,68,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,47,-21,51,-34,-34,-7,-8,-9,-10,-24,-12,61,-29,-33,-35,63,65,-22,-18,-20,-28,-30,-32,-23,-6,-19,]),'DO':([6,12,13,14,17,19,20,21,22,31,33,35,41,42,43,44,45,47,51,57,59,60,61,63,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,48,-21,-7,-8,-9,-10,-24,-12,-29,-22,-18,-20,-28,-30,-23,-6,-19,]),'THEN':([6,12,13,14,17,19,20,21,22,31,34,35,41,42,43,44,45,47,51,57,59,60,61,63,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,49,-21,-7,-8,-9,-10,-24,-12,-29,-22,-18,-20,-28,-30,-23,-6,-19,]),'COMMA':([6,12,13,14,17,19,20,21,22,31,35,36,37,39,41,42,43,44,45,47,50,51,52,53,54,56,57,59,60,61,63,68,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,-21,-34,-34,-34,-7,-8,-9,-10,-24,-12,62,-29,-33,-35,62,62,-22,-18,-20,-28,-30,-32,-23,-6,-19,]),'IN':([6,12,13,14,17,19,20,21,22,31,35,41,42,43,44,45,47,51,57,58,59,60,61,63,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,-21,-7,-8,-9,-10,-24,-12,-29,-22,66,-18,-20,-28,-30,-23,-6,-19,]),'ELSE':([6,12,13,14,17,19,20,21,22,31,35,41,42,43,44,45,47,51,57,59,60,61,63,69,70,71,],[-31,-25,-26,-27,-13,-14,-15,-16,-17,-11,-21,-7,-8,-9,-10,-24,-12,-29,-22,-18,67,-28,-30,-23,-6,-19,]),'RCBRACE':([17,19,20,21,22,40,57,],[-13,-14,-15,-16,-17,57,-22,]),'EQUALS':([30,],[46,]),'AS':([38,],[55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'imports':([0,],[2,]),'expression':([0,2,7,8,9,10,11,25,26,27,28,29,36,37,39,46,48,49,62,65,66,67,],[3,23,31,32,33,34,35,41,42,43,44,45,53,53,53,58,59,60,53,69,70,71,]),'import':([0,2,],[4,24,]),'function_call':([0,2,7,8,9,10,11,25,26,27,28,29,36,37,39,46,48,49,62,65,66,67,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'lambda':([0,2,7,8,9,10,11,25,26,27,28,29,36,37,39,46,48,49,62,65,66,67,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'term':([0,2,7,8,9,10,11,18,25,26,27,28,29,36,37,39,46,48,49,62,65,66,67,],[14,14,14,14,14,14,14,40,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'factor':([0,2,7,8,9,10,11,18,25,26,27,28,29,36,37,39,46,48,49,62,65,66,67,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'args':([36,37,39,],[50,54,56,]),'arg':([36,37,39,62,],[52,52,52,68,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> imports expression','program',2,'p_program','maryChain.py',242),
  ('program -> expression','program',1,'p_program','maryChain.py',243),
  ('import -> IMPORT IDENTIFIER AS IDENTIFIER','import',4,'p_import','maryChain.py',283),
  ('imports -> import','imports',1,'p_imports','maryChain.py',289),
  ('imports -> imports import','imports',2,'p_imports','maryChain.py',290),
  ('expression -> LET IDENTIFIER EQUALS expression IN expression','expression',6,'p_expression_let_in','maryChain.py',301),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','maryChain.py',322),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','maryChain.py',323),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','maryChain.py',324),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','maryChain.py',325),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','maryChain.py',345),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','maryChain.py',349),
  ('term -> factor','term',1,'p_term_factor','maryChain.py',353),
  ('factor -> STRING','factor',1,'p_factor_string','maryChain.py',357),
  ('factor -> NUMBER','factor',1,'p_factor_num','maryChain.py',361),
  ('factor -> TRUE','factor',1,'p_factor_boolean','maryChain.py',365),
  ('factor -> FALSE','factor',1,'p_factor_boolean','maryChain.py',366),
  ('expression -> WHILE expression DO expression','expression',4,'p_expression_while','maryChain.py',373),
  ('expression -> IF expression THEN expression ELSE expression','expression',6,'p_expression_if_then_else','maryChain.py',380),
  ('expression -> IF expression THEN expression','expression',4,'p_expression_if_then','maryChain.py',400),
  ('expression -> LAZY expression','expression',2,'p_lazy_expr','maryChain.py',422),
  ('term -> LCBRACE term RCBRACE','term',3,'p_expression_braces','maryChain.py',440),
  ('lambda -> LAMBDA LPAREN args RPAREN expression','lambda',5,'p_expression_lambda','maryChain.py',458),
  ('expression -> expression PIPE expression','expression',3,'p_expression_pipe','maryChain.py',476),
  ('expression -> function_call','expression',1,'p_expression_func_call','maryChain.py',493),
  ('expression -> lambda','expression',1,'p_expression_func_call','maryChain.py',494),
  ('expression -> term','expression',1,'p_expression_term','maryChain.py',512),
  ('function_call -> function_call LPAREN args RPAREN','function_call',4,'p_function_call','maryChain.py',564),
  ('function_call -> function_call LPAREN RPAREN','function_call',3,'p_function_call','maryChain.py',565),
  ('function_call -> lambda LPAREN args RPAREN','function_call',4,'p_function_call','maryChain.py',566),
  ('function_call -> IDENTIFIER','function_call',1,'p_function_call','maryChain.py',567),
  ('args -> args COMMA arg','args',3,'p_args','maryChain.py',586),
  ('args -> arg','args',1,'p_args','maryChain.py',587),
  ('args -> <empty>','args',0,'p_args','maryChain.py',588),
  ('arg -> expression','arg',1,'p_arg','maryChain.py',615),
]
